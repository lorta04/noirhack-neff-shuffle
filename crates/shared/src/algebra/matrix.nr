pub fn mul_4x4_by_4x2(a: [[Field; 4]; 4], b: [[Field; 2]; 4]) -> [[Field; 2]; 4] {
    let mut c: [[Field; 2]; 4] = [[0; 2]; 4];
    for i in 0..4 {
        for j in 0..2 {
            let mut sum = 0;
            for k in 0..4 {
                sum += a[i][k] * b[k][j];
            }
            c[i][j] = sum;
        }
    }
    c
}

pub fn mul_5x5_by_5x2(a: [[Field; 5]; 5], b: [[Field; 2]; 5]) -> [[Field; 2]; 5] {
    let mut c: [[Field; 2]; 5] = [[0; 2]; 5];
    for i in 0..5 {
        for j in 0..2 {
            let mut sum = 0;
            for k in 0..5 {
                sum += a[i][k] * b[k][j];
            }
            c[i][j] = sum;
        }
    }
    c
}

pub fn mul_6x6_by_6x2(a: [[Field; 6]; 6], b: [[Field; 2]; 6]) -> [[Field; 2]; 6] {
    let mut c: [[Field; 2]; 6] = [[0; 2]; 6];
    for i in 0..6 {
        for j in 0..2 {
            let mut sum = 0;
            for k in 0..6 {
                sum += a[i][k] * b[k][j];
            }
            c[i][j] = sum;
        }
    }
    c
}

pub fn mul_7x7_by_7x2(a: [[Field; 7]; 7], b: [[Field; 2]; 7]) -> [[Field; 2]; 7] {
    let mut c: [[Field; 2]; 7] = [[0; 2]; 7];
    for i in 0..7 {
        for j in 0..2 {
            let mut sum = 0;
            for k in 0..7 {
                sum += a[i][k] * b[k][j];
            }
            c[i][j] = sum;
        }
    }
    c
}

pub fn mul_8x8_by_8x2(a: [[Field; 8]; 8], b: [[Field; 2]; 8]) -> [[Field; 2]; 8] {
    let mut c: [[Field; 2]; 8] = [[0; 2]; 8];
    for i in 0..8 {
        for j in 0..2 {
            let mut sum = 0;
            for k in 0..8 {
                sum += a[i][k] * b[k][j];
            }
            c[i][j] = sum;
        }
    }
    c
}

pub fn mul_9x9_by_9x2(a: [[Field; 9]; 9], b: [[Field; 2]; 9]) -> [[Field; 2]; 9] {
    let mut c: [[Field; 2]; 9] = [[0; 2]; 9];
    for i in 0..9 {
        for j in 0..2 {
            let mut sum = 0;
            for k in 0..9 {
                sum += a[i][k] * b[k][j];
            }
            c[i][j] = sum;
        }
    }
    c
}

pub fn mul_10x10_by_10x2(a: [[Field; 10]; 10], b: [[Field; 2]; 10]) -> [[Field; 2]; 10] {
    let mut c: [[Field; 2]; 10] = [[0; 2]; 10];
    for i in 0..10 {
        for j in 0..2 {
            let mut sum = 0;
            for k in 0..10 {
                sum += a[i][k] * b[k][j];
            }
            c[i][j] = sum;
        }
    }
    c
}

#[test]
fn test_mul_4x4_by_4x2() {
    let a: [[Field; 4]; 4] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]];
    let b: [[Field; 2]; 4] = [[1, 2], [3, 4], [5, 6], [7, 8]];

    let result = mul_4x4_by_4x2(a, b);
    let expected: [[Field; 2]; 4] = [[50, 60], [114, 140], [178, 220], [242, 300]];

    for i in 0..4 {
        for j in 0..2 {
            assert(result[i][j] == expected[i][j]);
        }
    }
}

#[test]
fn test_mul_5x5_by_5x2() {
    let a: [[Field; 5]; 5] = [
        [1, 2, 3, 4, 5],
        [6, 7, 8, 9, 10],
        [11, 12, 13, 14, 15],
        [16, 17, 18, 19, 20],
        [21, 22, 23, 24, 25],
    ];
    let b: [[Field; 2]; 5] = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]];

    let result = mul_5x5_by_5x2(a, b);
    let expected: [[Field; 2]; 5] = [[95, 110], [220, 260], [345, 410], [470, 560], [595, 710]];

    for i in 0..5 {
        for j in 0..2 {
            assert(result[i][j] == expected[i][j]);
        }
    }
}

#[test]
fn test_mul_6x6_by_6x2() {
    let a: [[Field; 6]; 6] = [
        [1, 2, 3, 4, 5, 6],
        [7, 8, 9, 10, 11, 12],
        [13, 14, 15, 16, 17, 18],
        [19, 20, 21, 22, 23, 24],
        [25, 26, 27, 28, 29, 30],
        [31, 32, 33, 34, 35, 36],
    ];
    let b: [[Field; 2]; 6] = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]];

    let result = mul_6x6_by_6x2(a, b);
    let expected: [[Field; 2]; 6] =
        [[161, 182], [377, 434], [593, 686], [809, 938], [1025, 1190], [1241, 1442]];

    for i in 0..6 {
        for j in 0..2 {
            assert(result[i][j] == expected[i][j]);
        }
    }
}

#[test]
fn test_mul_7x7_by_7x2() {
    let a: [[Field; 7]; 7] = [
        [1, 2, 3, 4, 5, 6, 7],
        [8, 9, 10, 11, 12, 13, 14],
        [15, 16, 17, 18, 19, 20, 21],
        [22, 23, 24, 25, 26, 27, 28],
        [29, 30, 31, 32, 33, 34, 35],
        [36, 37, 38, 39, 40, 41, 42],
        [43, 44, 45, 46, 47, 48, 49],
    ];
    let b: [[Field; 2]; 7] = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]];

    let result = mul_7x7_by_7x2(a, b);
    let expected: [[Field; 2]; 7] = [
        [252, 280],
        [595, 672],
        [938, 1064],
        [1281, 1456],
        [1624, 1848],
        [1967, 2240],
        [2310, 2632],
    ];

    for i in 0..7 {
        for j in 0..2 {
            assert(result[i][j] == expected[i][j]);
        }
    }
}

#[test]
fn test_mul_8x8_by_8x2() {
    let a: [[Field; 8]; 8] = [
        [1, 2, 3, 4, 5, 6, 7, 8],
        [9, 10, 11, 12, 13, 14, 15, 16],
        [17, 18, 19, 20, 21, 22, 23, 24],
        [25, 26, 27, 28, 29, 30, 31, 32],
        [33, 34, 35, 36, 37, 38, 39, 40],
        [41, 42, 43, 44, 45, 46, 47, 48],
        [49, 50, 51, 52, 53, 54, 55, 56],
        [57, 58, 59, 60, 61, 62, 63, 64],
    ];
    let b: [[Field; 2]; 8] =
        [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]];

    let result = mul_8x8_by_8x2(a, b);
    let expected: [[Field; 2]; 8] = [
        [372, 408],
        [884, 984],
        [1396, 1560],
        [1908, 2136],
        [2420, 2712],
        [2932, 3288],
        [3444, 3864],
        [3956, 4440],
    ];

    for i in 0..8 {
        for j in 0..2 {
            assert(result[i][j] == expected[i][j]);
        }
    }
}

#[test]
fn test_mul_9x9_by_9x2() {
    let a: [[Field; 9]; 9] = [
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [10, 11, 12, 13, 14, 15, 16, 17, 18],
        [19, 20, 21, 22, 23, 24, 25, 26, 27],
        [28, 29, 30, 31, 32, 33, 34, 35, 36],
        [37, 38, 39, 40, 41, 42, 43, 44, 45],
        [46, 47, 48, 49, 50, 51, 52, 53, 54],
        [55, 56, 57, 58, 59, 60, 61, 62, 63],
        [64, 65, 66, 67, 68, 69, 70, 71, 72],
        [73, 74, 75, 76, 77, 78, 79, 80, 81],
    ];
    let b: [[Field; 2]; 9] =
        [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]];

    let result = mul_9x9_by_9x2(a, b);
    let expected: [[Field; 2]; 9] = [
        [525, 570],
        [1254, 1380],
        [1983, 2190],
        [2712, 3000],
        [3441, 3810],
        [4170, 4620],
        [4899, 5430],
        [5628, 6240],
        [6357, 7050],
    ];

    for i in 0..9 {
        for j in 0..2 {
            assert(result[i][j] == expected[i][j]);
        }
    }
}

#[test]
fn test_mul_10x10_by_10x2() {
    let a: [[Field; 10]; 10] = [
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
        [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
        [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
        [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
        [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
        [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
        [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
        [91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
    ];
    let b: [[Field; 2]; 10] =
        [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]];

    let result = mul_10x10_by_10x2(a, b);
    let expected: [[Field; 2]; 10] = [
        [715, 770],
        [1715, 1870],
        [2715, 2970],
        [3715, 4070],
        [4715, 5170],
        [5715, 6270],
        [6715, 7370],
        [7715, 8470],
        [8715, 9570],
        [9715, 10670],
    ];

    for i in 0..10 {
        for j in 0..2 {
            assert(result[i][j] == expected[i][j]);
        }
    }
}
